1. The Context maintains a reference to one of the concrete strategies 
	and communicates with this object only via the strategy interface.
	
	public class CompressionContext
	{
		private ICompressionStrategy strategy;
	}

2. The Strategy interface is common to all concrete strategies. 
	It declares a method the context uses to execute a strategy

	public interface ICompressionStrategy

3. Concrete Strategies implement different variations of an algorithm the context uses.
	
	public class GzipCompression : ICompressionStrategy
	public class RarCompression : ICompressionStrategy
	public class ZipCompression : ICompressionStrategy

4. The context calls the execution method on the linked strategy object each time it needs 
	to run the algorithm. The context doesn’t know what type of strategy it works 
	with or how the algorithm is executed.

	strategy.Compress(fileName);

5.	The Client creates a specific strategy object and passes it to the context. 
	The context exposes a setter which lets clients replace  
	the strategy associated with the context at runtime.
	
	var context = new CompressionContext();

	context.SetStrategy(new ZipCompression());
	context.CreateArchive("file1.txt");

	context.SetStrategy(new RarCompression());
	context.CreateArchive("file2.txt");

	context.SetStrategy(new GzipCompression());
	context.CreateArchive("file3.txt");

	



