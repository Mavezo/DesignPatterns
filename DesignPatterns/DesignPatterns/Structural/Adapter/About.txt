1. The Client is a class that contains the existing business logic of the program
	IJsonSerializer serializer = new NewtonsoftJsonSerializer();

2. The Client Interface describes a protocol that other classes must follow to be able to collaborate with the client code
	IJsonSerializer serializer
	public class NewtonsoftJsonSerializer : IJsonSerializer
	public class SystemTextJsonAdapter : IJsonSerializer

3. The Service is some useful class (usually 3rd-party or legacy). 
	The client can’t use this class directly because it has an incompatible interface
	IJsonSerializer serializer = new NewtonsoftJsonSerializer();

4. The Adapter is a class that’s able to work with both the client and the service: it implements the client interface, 
	while wrapping the service object. The adapter receives calls from the client via the client interface
	public class SystemTextJsonAdapter : IJsonSerializer

5. The client code doesn’t get coupled to the concrete adapter class as long as it works with 
	the adapter via the client interface. Thanks to this, you can introduce new types of adapters 
	into the program without breaking the existing client code. 

	IJsonSerializer serializer = new NewtonsoftJsonSerializer();
	<=>
	IJsonSerializer serializer = new SystemTextJsonAdapter();
