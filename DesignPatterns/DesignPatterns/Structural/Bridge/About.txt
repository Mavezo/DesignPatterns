1. The Abstraction provides high-level control logic. 
	It relies on the implementation object to do the actual low-level work
		public interface INotificationSender
		{
			void Send(string message);
		}

2. The Implementation declares the interface that’s common for all concrete implementations
	An abstraction can only communicate with an implementation object via methods that are declared here.
	
	public class EmailSender : INotificationSender
	public class SmsSender : INotificationSender

	The abstraction may list the same methods as the implementation, but usually the abstraction declares some 
	complex behaviors that rely on a wide variety of primitive operations declared by the implementation

3. Concrete Implementations contain platform-specific code.
	...
	
4. Refined Abstractions provide variants of control logic. Like their parent, they work with 
	different implementations via the general implementation interface
	public class UrgentNotification : Notification
	public class ScheduledNotification : Notification 
		protected readonly DateTime scheduledTime;
	
5. Usually, the Client is only interested in working with the abstraction. 
	However, it’s the client’s job to link the abstraction object with one of the implementation objects.

	INotificationSender sender = new SmsSender();           
	Notification notification = new UrgentNotification(sender); 

	notification.Notify("Database error");